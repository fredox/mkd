diff --git a/src/includes/Alias.php b/src/includes/Alias.php
index fccb5f0..43e4fa2 100644
--- a/src/includes/Alias.php
+++ b/src/includes/Alias.php
@@ -16,8 +16,6 @@ Class Alias {
             $aliasIndex = $matches[0];
             Output::print_msg("Replacing alias by: [" . $aliases[$aliasIndex]['slug'] . "]");
             $params = self::getParams($aliases[$aliasIndex]['slug'], $params);
-        } else {
-            Output::print_msg("No aliases detected", "ALIAS");
         }
 
         return $params;
@@ -48,7 +46,7 @@ Class Alias {
             Output::print_msg("+ ---------");
         }
 
-        Output::intro(2, true);
+        Output::intro(1, true);
     }
 
     public static function getAliases()
diff --git a/src/includes/Health.php b/src/includes/Health.php
index a39e496..76fcc1a 100644
--- a/src/includes/Health.php
+++ b/src/includes/Health.php
@@ -30,7 +30,8 @@ Class Health {
         if (!array_key_exists(1, $params)) {
             Output::print_msg("Health param must be preceded by a config folder\n\n", "ERROR][HEALTH");
             InputHelp::showConfigFolders();
-            exit;
+            Script::close();
+            return;
         }
 
         if (is_dir('config/' . $params[1])) {
diff --git a/src/includes/InputHelp.php b/src/includes/InputHelp.php
index f141bf6..f8d4c88 100644
--- a/src/includes/InputHelp.php
+++ b/src/includes/InputHelp.php
@@ -10,49 +10,49 @@ class InputHelp {
         if (empty($args)) {
             static::showDefaultConfigEnvironments();
             Output::print_msg();
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         $commandArgs = implode(' ', $args);
 
         if (preg_match("/^(recipe|r):$/", $commandArgs)) {
             static::showRecipes();
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^(recipe|r): -v$/", $commandArgs)) {
             static::showRecipes($verbose=true);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:$/", $commandArgs)) {
             static::showConfigFolders();
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:([^\s:]+) ?$/", $commandArgs, $matches)) {
             static::showConfigEnvironments($matches[1]);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:([^\s:]+): ?$/", $commandArgs, $matches)) {
             static::showConfigGroups($matches[1]);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:([^\s:]+):: ?$/", $commandArgs, $matches)) {
             static::showQueries($matches[1]);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:([^\s:]+)::([^\s]+) ?$/", $commandArgs, $matches)) {
             static::showConfigEnvironments($matches[1]);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
 
         if (preg_match("/^cfg:([^\s]+):([^\s]+) ?$/", $commandArgs, $matches)) {
             static::showConfigEnvironments($matches[1]);
-            Output::intro(2, true);
+            Output::intro(1, true);
         }
     }
 
@@ -123,9 +123,10 @@ class InputHelp {
     {
         $config = array();
 
-        include_once('config/' . $configPath . '/config.php');
+        include('config/' . $configPath . '/config.php');
 
         if ((!array_key_exists('groups', $config)) || !$config['groups']) {
+            print_r($config);
             Output::print_msg("groups key it is not set on config [". $configPath ."]\n\n", "ERROR", true);
         }
 
diff --git a/src/includes/Output.php b/src/includes/Output.php
index 56d8ddf..8f47adc 100644
--- a/src/includes/Output.php
+++ b/src/includes/Output.php
@@ -22,7 +22,7 @@ class Output {
         }
 
         if($exit) {
-            exit();
+            Script::close();
         }
     }
 
diff --git a/src/mkd.php b/src/mkd.php
index dd0a26f..fc9fa8a 100644
--- a/src/mkd.php
+++ b/src/mkd.php
@@ -17,41 +17,21 @@ include_once('includes/Logo.php');
 include_once('includes/Output.php');
 include_once('includes/JsonTableConverter.php');
 
-Logo::startLogo();
-
-//remove script name from params
 array_shift($argv);
 
-Install::checkCreateInstall($argv);
-Help::checkHelp($argv);
-
-$params = Alias::checkAlias($argv);
+Script::open();
 
-if (array_key_exists(0, $params)) {
-    Health::checkHealth($params[0], $argv);
-    Analyze::checkAnalyze($params[0], $argv);
-    Clean::checkClean($params[0]);
+if ($argv[0] != '-i') {
+    Mikado::execute($argv);
+} else {
+    Mikado::interactive();
 }
 
-InputHelp::getHelp($params);
-
-Output::print_msg("Timer starts.", "INFO");
-Timer::start('script');
-
-Mikado::start($params);
-
-Logo::endLogo();
-Output::print_msg("Timer, Elapsed: " . round(Timer::elapsed('script'),1) . " seconds\n\n", "INFO");
 
 class Mikado {
 
     public static function start($args)
     {
-        if (count($args) == 1 && $args[0] == '-clean') {
-            Clean::deleteIoFiles();
-            return;
-        }
-
         if (!preg_match("/^(?:recipe|r):(.*)$/", $args[0], $matches)) {
             static::run($args);
         } else {
@@ -61,6 +41,38 @@ class Mikado {
         }
     }
 
+    public static function execute($args)
+    {
+        Logo::startLogo();
+
+        Install::checkCreateInstall($args);
+        if (Script::isOpen()) { Help::checkHelp($args); }
+
+        $params = Alias::checkAlias($args);
+
+        if (array_key_exists(0, $params)) {
+            if (Script::isOpen()) { Health::checkHealth($params[0], $args); }
+            if (Script::isOpen()) { Analyze::checkAnalyze($params[0], $args); }
+            if (Script::isOpen()) { Clean::checkClean($params[0]); }
+        }
+
+        if (Script::isOpen()) { InputHelp::getHelp($params); }
+        if (Script::isOpen()) { Output::print_msg("Timer starts.", "INFO"); }
+        if (Script::isOpen()) { Timer::start('script'); }
+        if (Script::isOpen()) { Mikado::start($params); }
+        if (Script::isOpen()) { Output::print_msg("Timer, Elapsed: " . round(Timer::elapsed('script'),1) . " seconds\n\n", "INFO"); }
+        if (Script::isOpen()) { Output::print_msg(" Memory usage: " . self::convert(memory_get_usage(true))); }
+
+
+        Logo::endLogo();
+    }
+
+    public static function convert($size)
+    {
+        $unit=array('b','kb','mb','gb','tb','pb');
+        return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];
+    }
+
     public static function checkConfig($config, $queries, $configPath)
     {
         if (empty($config)) {
@@ -331,6 +343,49 @@ class Mikado {
 
         return $keys;
     }
+
+    public static function interactive()
+    {
+        $quitParams = ['quit', 'exit', 'adios'];
+
+        Output::print_msg("Mikado interactive >", "INFO", false);
+        Output::intro();
+
+        do {
+            Script::open();
+
+            $cmd = trim((readline(magentaFormat("\n\t mkd> "))));
+            readline_add_history($cmd);
+            $params = explode(' ', $cmd);
+
+            if (!in_array($params[0], $quitParams)) {
+                Mikado::execute($params);
+            }
+
+        } while (!in_array($params[0], $quitParams));
+
+        Output::print_msg("Mikado interactive END. See you soon!\n\n", "INFO", false);
+    }
+}
+
+class Script {
+    public static $status = 'NONE';
+
+    public static function open() {
+        self::$status = 'OPEN';
+    }
+
+    public static function close() {
+        self::$status = 'CLOSED';
+    }
+
+    public static function isClosed() {
+        return self::$status == 'CLOSED';
+    }
+
+    public static function isOpen() {
+        return self::$status == 'OPEN';
+    }
 }
 
 
